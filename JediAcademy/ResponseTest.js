// Ports:
// 29070, 29071, 29072, 29073, 
const dgram = require("dgram");

const STATUS_RESPONSE = new Buffer([
    //                      ASCII from byte 4
    0xff, 0xff, 0xff, 0xff, 0x69, 0x6e, 0x66, 0x6f,
    0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
    0x0a, 0x5c, 0x61, 0x75, 0x74, 0x6f, 0x64, 0x65,
    0x6d, 0x6f, 0x5c, 0x30, 0x5c, 0x66, 0x64, 0x69,
    0x73, 0x61, 0x62, 0x6c, 0x65, 0x5c, 0x30, 0x5c,
    0x77, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
    0x5c, 0x30, 0x5c, 0x74, 0x72, 0x75, 0x65, 0x6a,
    0x65, 0x64, 0x69, 0x5c, 0x30, 0x5c, 0x6e, 0x65,
    0x65, 0x64, 0x70, 0x61, 0x73, 0x73, 0x5c, 0x30,
    0x5c, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x79, 0x70,
    0x65, 0x5c, 0x30, 0x5c, 0x73, 0x76, 0x5f, 0x6d,
    0x61, 0x78, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
    0x73, 0x5c, 0x38, 0x5c, 0x67, 0x5f, 0x68, 0x75,
    0x6d, 0x61, 0x6e, 0x70, 0x6c, 0x61, 0x79, 0x65,
    0x72, 0x73, 0x5c, 0x31, 0x5c, 0x63, 0x6c, 0x69,
    0x65, 0x6e, 0x74, 0x73, 0x5c, 0x31, 0x5c, 0x6d,
    0x61, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x5c, 0x6d,
    0x70, 0x2f, 0x66, 0x66, 0x61, 0x31, 0x5c, 0x68,
    0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5c,
    0x2a, 0x4a, 0x65, 0x64, 0x69, 0x2a, 0x5c, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5c,
    0x32, 0x36, 0x5c, 0x63, 0x68, 0x61, 0x6c, 0x6c,
    0x65, 0x6e, 0x67, 0x65, 0x5c, 0x78, 0x78, 0x78,
])
//????infoResponse\autodemo\0\fdisable\0\wdisable\0\truejedi\0\needpass\0\gametype\0\sv_maxclients\8\g_humanplayers\1\clients\1\mapname\mp/ffa1\hostname\*Jedi*\protocol\26\challenge\xxx
// Standard request for server list
const STATUS_REQUEST = new Buffer([
    //                        g     e    t     i     n
    0xff, 0xff, 0xff, 0xff, 0x67, 0x65, 0x74, 0x69, 0x6e,
    //f     o  [space]  x     x     x
    0x66, 0x6f, 0x20, 0x78, 0x78, 0x78]);

const receiverSocket = dgram.createSocket("udp4");
receiverSocket.on("message", (msg, addr) => {
    console.log("Message from ", addr);
    console.log("Dump follows:");
    let dump = "";
    for (let i = 0, l = msg.byteLength; i < l; ++i) {
        const item = msg[i];
        dump += "0x" + (item < 16 ? "0" : "") + item.toString(16) + ", ";
        if (i % 8 == 7) {
            dump += "\n";
        }
    }
    console.log(dump);
    console.log("As text: ", msg.toString("utf8"));
    if (msg[0] == 0xff && msg[1] == 0xff) {
        //delete require.cache[require.resolve("./DKIIServerInfo")];
        //RESPONSE = require("./DKIIServerInfo");
        //receiverSocket.send(RESPONSE, 0, RESPONSE.byteLength, addr.port, addr.address);
    }
});
//receiverSocket.bind(7575);
setInterval(
    () => { receiverSocket.send(STATUS_REQUEST, 0, STATUS_REQUEST.byteLength, 29070, "127.0.0.1"); },
    2000
);