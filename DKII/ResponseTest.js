const dgram = require("dgram");



const UDP_BROADCAST = new Buffer([0xbf, 0x05, 0x00, 0x18, 0x64, 0x00, 0x00, 0x00, 0xb0, 0xcc, 0x18, 0x00, 0xa0, 0xf6, 0xb5, 0x78,
    0xec, 0x6b, 0xd1, 0x11, 0x8c, 0x57, 0x00, 0xa0, 0xc9, 0x93, 0xf0, 0xc6]);
// Response attempt 1
let RESPONSE = require("./DKIIServerInfo");

const CONNECT_REQUEST = new Buffer([
    0xbf, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xa0, 0xf6, 0xb5, 0x78, 0xec, 0x6b, 0xd1, 0x11,
    0x8c, 0x57, 0x00, 0xa0, 0xc9, 0x93, 0xf0, 0xc6,
    0xc0, 0xa8, 0x03, 0x0a, 0x1d, 0x97, 0xce, 0x3d,
    0xd8, 0x2c, 0x05, 0x0a, 0x2f, 0x04, 0x32, 0x76,
    0xc0, 0xa8, 0x03, 0x0a, 0xd8, 0x91, 0x9e, 0x84,
    0xf8, 0x2c, 0x05, 0x2e, 0x02, 0x04, 0x2c, 0x11,
// plname
    0x44, 0x00, 0x64, 0x00, 0x64, 0x00, 0x64, 0x00,
    0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
])


const receiverSocket = dgram.createSocket("udp4");
receiverSocket.on("message", (msg, addr) => {
    console.log("Message from ", addr);
    console.log("Dump follows:");
    let dump = "";
    for (let i = 0, l = msg.byteLength; i < l; ++i) {
        const item = msg[i];
        dump += "0x" + (item < 16 ? "0" : "") + item.toString(16) + ", ";
        if (i % 8 == 7) {
            dump += "\n";
        }
    }
    console.log(dump);
    console.log("As text: ", msg.toString("utf8"));
    if (msg[0] == 0xbf && msg[1] == 0x05) {
        delete require.cache[require.resolve("./DKIIServerInfo")];
        RESPONSE = require("./DKIIServerInfo");
        receiverSocket.send(RESPONSE, 0, RESPONSE.byteLength, addr.port, addr.address);
    }
});
//receiverSocket.bind(7575);
setInterval(
    () => { receiverSocket.send(UDP_BROADCAST, 0, UDP_BROADCAST.byteLength, 1234, "127.0.0.1"); },
    2000
);